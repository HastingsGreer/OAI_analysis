# -*- coding: utf-8 -*-
"""OAI_distribute.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zMIrMSJThZfJQhhl25gub5mylS0fXgbf
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# #Follow this cell to install PyMesh on any system. Runtime: ~20 mins
# 
# #apt-get install libgmp3-dev
# #apt-get install libmpfr-dev
# #git clone https://github.com/PyMesh/PyMesh.git
# 
# # if a future PyMesh commit breaks this notebook, commit 
# # 384ba882b7558ba6e8653ed263c419226c22bddf
# # is known good
# 
# #cd PyMesh
# #git submodule update --init
# #python3 setup.py build
# #python3 setup.py install

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# #This tarball may depend on the specific compiler settings and available libraries on google colab.
# #We strongly recommend compiling PyMesh yourself as documented above when running on your local system.
# 
# #Runtime: ~1 min
# apt-get install libgmp3-dev
# apt-get install libmpfr-dev
# wget -nv https://github.com/HastingsGreer/PyMesh/releases/download/v0.3/PyMeshNoGit.tar
# tar -xf PyMeshNoGit.tar
# cd PyMesh
# python3 setup.py install

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# git clone https://github.com/uncbiag/easyreg.git
# cd easyreg
# 
# git checkout 074a54a0d72d01b2949fda44db9dd039e5ceae74
# 
# pip install -r requirements.txt
# git clone https://github.com/uncbiag/mermaid.git
# 
# # if a future commit breaks this notebook, commit 
# # d0f4a7c044c0e6e81de2fb5a3fd708bf7c872fce of mermaid
# # is known good.
# 
# cd mermaid
# python setup.py develop
# cd ../..
# git clone https://github.com/HastingsGreer/oai_analysis
# cd oai_analysis/
# 
# git checkout e51a4a42883dd348799cf6e7e32e5c9d76e2672b
# 
# pip install -r requirement.txt

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# wget -nv https://dist.ipfs.io/go-ipfs/v0.9.0/go-ipfs_v0.9.0_linux-amd64.tar.gz
# tar -xzf go-ipfs_v0.9.0_linux-amd64.tar.gz
# cd go-ipfs
# bash install.sh

#hack until we decide where to host weights
!wget https://github.com/HastingsGreer/OAI_analysis/releases/download/0.1/pre_trained_model
!mkdir -p /nas/longleaf/home/mn/python/registration_net/mermaid/pretrained/
!cp pre_trained_model /nas/longleaf/home/mn/python/registration_net/mermaid/pretrained/

# Commented out IPython magic to ensure Python compatibility.
#MUST RESTART RUNTIME AFTER RUNNING PREVIOUS CELLS, AND BEFORE RUNNING THIS CELL AND ALL SUBSEQUENT (pymesh)
# %cd oai_analysis/

# Commented out IPython magic to ensure Python compatibility.
from data.OAI_data import OAIData, OAIImage, OAIPatients
from oai_image_analysis import OAIImageAnalysis
import matplotlib.pyplot as plt
import itk
from mpl_toolkits import mplot3d
import numpy as np
import matplotlib.pyplot as plt
import mn_oai_pipeline
import os
import pymesh

# %matplotlib inline

PARAMS = mn_oai_pipeline.PARAMS
for key, value in mn_oai_pipeline.DEFAULT.items():
    PARAMS[key] = value

# values in PARAMS must be absolute paths and contain no spaces.
PARAMS["output_directory"] = os.path.abspath("../results/")
PARAMS["avsm_directory"] = os.path.abspath("../easyreg")
PARAMS["atlas_image"] = os.path.abspath("../oai_analysis/atlas/atlas_60_LEFT_baseline_NMI/atlas.nii.gz")

def show_filename(fname):
    if fname[-3:] == "ply":
        mesh = pymesh.load_mesh (fname)
        pts,_ = pymesh.mesh_to_graph(mesh)
        x,y,z=zip(*pts)
        x = np.array(x)
        y = np.array(y)
        z = np.array(z)
        fig = plt.figure(figsize=(800/72,800/72))
        ax = plt.axes(projection='3d')
        ax.scatter3D(x, y, z, c=z, cmap='Greens', s=1)
    elif fname[-3:] == "npy":
        data = np.load(fname)
        plt.imshow(data)
    else:
        volume = itk.GetArrayFromImage(itk.imread(fname))
        plt.imshow(volume[100], cmap="gray")
        plt.colorbar()
    plt.title(fname.split("/")[-1])
    plt.show()

OAI_data_sheet = PARAMS['oai_data_sheet']
OAI_data = OAIData(OAI_data_sheet, PARAMS['oai_data_directory'])
OAI_data.set_processed_data_paths( PARAMS['output_directory'], 'avsm')
test_image = OAI_data.get_images(patient_id= [9279291])[0] # 9279291, 9298954,9003380
analyzer = mn_oai_pipeline.build_default_analyzer(use_nifty=False, avsm_path=PARAMS["avsm_directory"])
analyzer.preprocess(test_image, overwrite=False, ipfs=True)
print("preprocessed")

analyzer.segment_image_and_save_results(test_image, overwrite=False)
analyzer.close_segmenter()
show_filename(test_image.FC_probmap_file)
show_filename(test_image.TC_probmap_file)
print("segmented")
analyzer.extract_surface_mesh(test_image, overwrite=False)
show_filename(test_image.FC_mesh_file)
show_filename(test_image.TC_mesh_file)
analyzer.register_image_to_atlas(test_image, True)
analyzer.warp_mesh(test_image, overwrite=True,do_clean=True)
analyzer.project_thickness_to_atlas(test_image, overwrite=False)
analyzer.set_atlas_2D_map(PARAMS['atlas_fc_2d_map_path'], PARAMS['atlas_tc_2d_map_path'])
analyzer.compute_atlas_2D_map(n_jobs=None)
analyzer.project_thickness_to_2D(test_image, overwrite=False)
show_filename(test_image.FC_2D_thickness_grid)
analyzer.eval_registration_surface_distance(test_image)
analyzer.get_surface_distances_eval()



# Commented out IPython magic to ensure Python compatibility.
# %%bash
# #Command for creating our precompiled pymesh tar
# cd /content/
# rm -r PyMesh/.git/
# tar -zcf PyMeshNoGit.tar PyMesh

#for posterity
!pip list

patient_cid = subprocess.check_output(['ipfs', 'add', '--cid-version', '1', '--raw-leaves', '-Q'], input=str(patient).encode()).decode().strip()

